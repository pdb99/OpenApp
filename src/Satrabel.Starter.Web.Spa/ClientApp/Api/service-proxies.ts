/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as moment from 'moment';

export class ClientBase {
    authToken?: string;

    protected transformOptions(options: any) {
        const xsrfToken = this.getCookie('XSRF-TOKEN');

        if(this.authToken)
            options.headers["Authorization"] = `Bearer ${this.authToken}`;

        if(xsrfToken)
            options.headers["X-XSRF-TOKEN"] = xsrfToken;

        return Promise.resolve(options);
    }

    public withToken(authToken?: string) {
        this.authToken = authToken;
        return this;
    }

    private getCookie(name): string | null {
        if (!document.cookie) return null;

        const cookiesWithName = document.cookie.split(';')
            .map(c => c.trim())
            .filter(c => c.startsWith(name + '='));
    
        if (cookiesWithName.length === 0) return null;
    
        return decodeURIComponent(cookiesWithName[0].split('=')[1]);
    }
}

export class AccountServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    isTenantAvailable(body: IsTenantAvailableInput | undefined): Promise<AjaxResponseOfIsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processIsTenantAvailable(_response);
        });
    }

    protected processIsTenantAvailable(response: Response): Promise<AjaxResponseOfIsTenantAvailableOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfIsTenantAvailableOutput.fromJS(resultData200) : new AjaxResponseOfIsTenantAvailableOutput();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfIsTenantAvailableOutput>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterInput | undefined): Promise<AjaxResponseOfRegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<AjaxResponseOfRegisterOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfRegisterOutput.fromJS(resultData200) : new AjaxResponseOfRegisterOutput();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfRegisterOutput>(<any>null);
    }
}

export class ConfigurationServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changeUiTheme(body: ChangeUiThemeInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Configuration/ChangeUiTheme";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processChangeUiTheme(_response);
        });
    }

    protected processChangeUiTheme(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class Demo1ServiceServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMyGreeting(): Promise<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/Demo1Service/GetMyGreeting";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMyGreeting(_response);
        });
    }

    protected processGetMyGreeting(response: Response): Promise<AjaxResponseOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfString.fromJS(resultData200) : new AjaxResponseOfString();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param message (optional) 
     * @return Success
     */
    sendNotification(message: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Demo1Service/SendNotification?";
        if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processSendNotification(_response);
        });
    }

    protected processSendNotification(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ImpersonateServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    impersonate(body: ImpersonateModel | undefined): Promise<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/Impersonate/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processImpersonate(_response);
        });
    }

    protected processImpersonate(response: Response): Promise<AjaxResponseOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfString.fromJS(resultData200) : new AjaxResponseOfString();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param tenantId (optional) 
     * @return Success
     */
    impersonateTenant(tenantId: number | undefined): Promise<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/Impersonate/ImpersonateTenant?";
        if (tenantId === null)
            throw new Error("The parameter 'tenantId' cannot be null.");
        else if (tenantId !== undefined)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processImpersonateTenant(_response);
        });
    }

    protected processImpersonateTenant(response: Response): Promise<AjaxResponseOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfString.fromJS(resultData200) : new AjaxResponseOfString();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfString>(<any>null);
    }

    /**
     * @return Success
     */
    backToImpersonator(): Promise<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/Impersonate/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processBackToImpersonator(_response);
        });
    }

    protected processBackToImpersonator(response: Response): Promise<AjaxResponseOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfString.fromJS(resultData200) : new AjaxResponseOfString();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfString>(<any>null);
    }
}

export class LanguageServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: LanguageDto | undefined): Promise<AjaxResponseOfLanguageDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<AjaxResponseOfLanguageDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfLanguageDto.fromJS(resultData200) : new AjaxResponseOfLanguageDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfLanguageDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: LanguageDto | undefined): Promise<AjaxResponseOfLanguageDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<AjaxResponseOfLanguageDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfLanguageDto.fromJS(resultData200) : new AjaxResponseOfLanguageDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfLanguageDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | undefined): Promise<AjaxResponseOfLanguageDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<AjaxResponseOfLanguageDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfLanguageDto.fromJS(resultData200) : new AjaxResponseOfLanguageDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfLanguageDto>(<any>null);
    }

    /**
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAll(maxResultCount: number | undefined, skipCount: number | undefined): Promise<AjaxResponseOfPagedResultDtoOfLanguageDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetAll?";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<AjaxResponseOfPagedResultDtoOfLanguageDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfPagedResultDtoOfLanguageDto.fromJS(resultData200) : new AjaxResponseOfPagedResultDtoOfLanguageDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfPagedResultDtoOfLanguageDto>(<any>null);
    }
}

export class LocalizationServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAll(body: LocalizationResultRequestDto | undefined): Promise<AjaxResponseOfPagedResultDtoOfLocalizationDto> {
        let url_ = this.baseUrl + "/api/services/app/Localization/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<AjaxResponseOfPagedResultDtoOfLocalizationDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfPagedResultDtoOfLocalizationDto.fromJS(resultData200) : new AjaxResponseOfPagedResultDtoOfLocalizationDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfPagedResultDtoOfLocalizationDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    save(body: LocalizationDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Localization/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: string | null | undefined): Promise<AjaxResponseOfLocalizationDto> {
        let url_ = this.baseUrl + "/api/services/app/Localization/Get?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<AjaxResponseOfLocalizationDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfLocalizationDto.fromJS(resultData200) : new AjaxResponseOfLocalizationDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfLocalizationDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSources(): Promise<AjaxResponseOfListOfSourceDto> {
        let url_ = this.baseUrl + "/api/services/app/Localization/GetSources";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetSources(_response);
        });
    }

    protected processGetSources(response: Response): Promise<AjaxResponseOfListOfSourceDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfListOfSourceDto.fromJS(resultData200) : new AjaxResponseOfListOfSourceDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfListOfSourceDto>(<any>null);
    }

    /**
     * @return Success
     */
    getLanguages(): Promise<AjaxResponseOfListOfLanguageDto> {
        let url_ = this.baseUrl + "/api/services/app/Localization/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetLanguages(_response);
        });
    }

    protected processGetLanguages(response: Response): Promise<AjaxResponseOfListOfLanguageDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfListOfLanguageDto.fromJS(resultData200) : new AjaxResponseOfListOfLanguageDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfListOfLanguageDto>(<any>null);
    }
}

export class RoleServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateRoleDto | undefined): Promise<AjaxResponseOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<AjaxResponseOfRoleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfRoleDto.fromJS(resultData200) : new AjaxResponseOfRoleDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfRoleDto>(<any>null);
    }

    /**
     * @param permission (optional) 
     * @return Success
     */
    getRoles(permission: string | null | undefined): Promise<AjaxResponseOfListResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetRoles(_response);
        });
    }

    protected processGetRoles(response: Response): Promise<AjaxResponseOfListResultDtoOfRoleListDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfListResultDtoOfRoleListDto.fromJS(resultData200) : new AjaxResponseOfListResultDtoOfRoleListDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfListResultDtoOfRoleListDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateRoleDto | undefined): Promise<AjaxResponseOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<AjaxResponseOfRoleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfRoleDto.fromJS(resultData200) : new AjaxResponseOfRoleDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfRoleDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllPermissions(): Promise<AjaxResponseOfListResultDtoOfPermissionDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllPermissions(_response);
        });
    }

    protected processGetAllPermissions(response: Response): Promise<AjaxResponseOfListResultDtoOfPermissionDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfListResultDtoOfPermissionDto.fromJS(resultData200) : new AjaxResponseOfListResultDtoOfPermissionDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfListResultDtoOfPermissionDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getRoleForEdit(id: number | undefined): Promise<AjaxResponseOfGetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetRoleForEdit(_response);
        });
    }

    protected processGetRoleForEdit(response: Response): Promise<AjaxResponseOfGetRoleForEditOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfGetRoleForEditOutput.fromJS(resultData200) : new AjaxResponseOfGetRoleForEditOutput();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfGetRoleForEditOutput>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | undefined): Promise<AjaxResponseOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<AjaxResponseOfRoleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfRoleDto.fromJS(resultData200) : new AjaxResponseOfRoleDto();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfRoleDto>(<any>null);
    }

    /**
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAll(maxResultCount: number | undefined, skipCount: number | undefined): Promise<AjaxResponseOfPagedResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAll?";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<AjaxResponseOfPagedResultDtoOfRoleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfPagedResultDtoOfRoleDto.fromJS(resultData200) : new AjaxResponseOfPagedResultDtoOfRoleDto();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfPagedResultDtoOfRoleDto>(<any>null);
    }
}

export class SessionServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Promise<AjaxResponseOfGetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetCurrentLoginInformations(_response);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): Promise<AjaxResponseOfGetCurrentLoginInformationsOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfGetCurrentLoginInformationsOutput.fromJS(resultData200) : new AjaxResponseOfGetCurrentLoginInformationsOutput();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfGetCurrentLoginInformationsOutput>(<any>null);
    }
}

export class TenantServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateTenantDto | undefined): Promise<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<AjaxResponseOfTenantDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfTenantDto.fromJS(resultData200) : new AjaxResponseOfTenantDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | undefined): Promise<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<AjaxResponseOfTenantDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfTenantDto.fromJS(resultData200) : new AjaxResponseOfTenantDto();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param name (optional) 
     * @param sorting (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return Success
     */
    getAll(name: string | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<AjaxResponseOfPagedResultDtoOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetAll?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<AjaxResponseOfPagedResultDtoOfTenantDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfPagedResultDtoOfTenantDto.fromJS(resultData200) : new AjaxResponseOfPagedResultDtoOfTenantDto();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfPagedResultDtoOfTenantDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: TenantDto | undefined): Promise<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<AjaxResponseOfTenantDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfTenantDto.fromJS(resultData200) : new AjaxResponseOfTenantDto();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfTenantDto>(<any>null);
    }
}

export class TokenAuthServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    authenticate(body: AuthenticateModel | undefined): Promise<AjaxResponseOfAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: Response): Promise<AjaxResponseOfAuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfAuthenticateResultModel.fromJS(resultData200) : new AjaxResponseOfAuthenticateResultModel();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfAuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Promise<AjaxResponseOfListOfExternalLoginProviderInfoModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetExternalAuthenticationProviders(_response);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): Promise<AjaxResponseOfListOfExternalLoginProviderInfoModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfListOfExternalLoginProviderInfoModel.fromJS(resultData200) : new AjaxResponseOfListOfExternalLoginProviderInfoModel();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfListOfExternalLoginProviderInfoModel>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    externalAuthenticate(body: ExternalAuthenticateModel | undefined): Promise<AjaxResponseOfExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processExternalAuthenticate(_response);
        });
    }

    protected processExternalAuthenticate(response: Response): Promise<AjaxResponseOfExternalAuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfExternalAuthenticateResultModel.fromJS(resultData200) : new AjaxResponseOfExternalAuthenticateResultModel();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfExternalAuthenticateResultModel>(<any>null);
    }
}

export class UserServiceProxy extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateUserDto | undefined): Promise<AjaxResponseOfUserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<AjaxResponseOfUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfUserDto.fromJS(resultData200) : new AjaxResponseOfUserDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfUserDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: UpdateUserDto | undefined): Promise<AjaxResponseOfUserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<AjaxResponseOfUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfUserDto.fromJS(resultData200) : new AjaxResponseOfUserDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfUserDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getRoles(): Promise<AjaxResponseOfListResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetRoles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetRoles(_response);
        });
    }

    protected processGetRoles(response: Response): Promise<AjaxResponseOfListResultDtoOfRoleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfListResultDtoOfRoleDto.fromJS(resultData200) : new AjaxResponseOfListResultDtoOfRoleDto();
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfListResultDtoOfRoleDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changeLanguage(body: ChangeUserLanguageDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processChangeLanguage(_response);
        });
    }

    protected processChangeLanguage(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | undefined): Promise<AjaxResponseOfUserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<AjaxResponseOfUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfUserDto.fromJS(resultData200) : new AjaxResponseOfUserDto();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfUserDto>(<any>null);
    }

    /**
     * @param userName (optional) 
     * @param email (optional) 
     * @param sorting (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return Success
     */
    getAll(userName: string | null | undefined, email: string | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<AjaxResponseOfPagedResultDtoOfUserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetAll?";
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<AjaxResponseOfPagedResultDtoOfUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AjaxResponseOfPagedResultDtoOfUserDto.fromJS(resultData200) : new AjaxResponseOfPagedResultDtoOfUserDto();
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AjaxResponseOfPagedResultDtoOfUserDto>(<any>null);
    }
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    tenancyName!: string;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IIsTenantAvailableInput {
    tenancyName: string;
}

export enum TenantAvailabilityState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    state?: TenantAvailabilityState;
    tenantId?: number | undefined;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IIsTenantAvailableOutput {
    state?: TenantAvailabilityState;
    tenantId?: number | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message?: string | undefined;
    members?: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.message = data["message"];
            if (data["members"] && data["members"].constructor === Array) {
                this.members = [];
                for (let item of data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (this.members && this.members.constructor === Array) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }
}

export interface IValidationErrorInfo {
    message?: string | undefined;
    members?: string[] | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code?: number;
    message?: string | undefined;
    details?: string | undefined;
    validationErrors?: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.message = data["message"];
            this.details = data["details"];
            if (data["validationErrors"] && data["validationErrors"].constructor === Array) {
                this.validationErrors = [];
                for (let item of data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (this.validationErrors && this.validationErrors.constructor === Array) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IErrorInfo {
    code?: number;
    message?: string | undefined;
    details?: string | undefined;
    validationErrors?: ValidationErrorInfo[] | undefined;
}

export class AjaxResponseOfIsTenantAvailableOutput implements IAjaxResponseOfIsTenantAvailableOutput {
    result?: IsTenantAvailableOutput;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new IsTenantAvailableOutput();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? IsTenantAvailableOutput.fromJS(data["result"]) : new IsTenantAvailableOutput();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIsTenantAvailableOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfIsTenantAvailableOutput {
    result?: IsTenantAvailableOutput;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class RegisterInput implements IRegisterInput {
    name!: string;
    surname!: string;
    userName!: string;
    emailAddress!: string;
    password!: string;
    captchaResponse?: string | undefined;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse?: string | undefined;
}

export class RegisterOutput implements IRegisterOutput {
    canLogin?: boolean;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data; 
    }
}

export interface IRegisterOutput {
    canLogin?: boolean;
}

export class AjaxResponseOfRegisterOutput implements IAjaxResponseOfRegisterOutput {
    result?: RegisterOutput;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new RegisterOutput();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? RegisterOutput.fromJS(data["result"]) : new RegisterOutput();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfRegisterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfRegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfRegisterOutput {
    result?: RegisterOutput;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class ChangeUiThemeInput implements IChangeUiThemeInput {
    theme!: string;

    constructor(data?: IChangeUiThemeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.theme = data["theme"];
        }
    }

    static fromJS(data: any): ChangeUiThemeInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUiThemeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["theme"] = this.theme;
        return data; 
    }
}

export interface IChangeUiThemeInput {
    theme: string;
}

export class AjaxResponse implements IAjaxResponse {
    result?: Result | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? Result.fromJS(data["result"]) : <any>undefined;
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponse {
    result?: Result | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class AjaxResponseOfString implements IAjaxResponseOfString {
    result?: string | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"];
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfString {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfString {
    result?: string | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class ImpersonateModel implements IImpersonateModel {
    tenantId?: number | undefined;
    userId?: number;

    constructor(data?: IImpersonateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): ImpersonateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IImpersonateModel {
    tenantId?: number | undefined;
    userId?: number;
}

export class LanguageDto implements ILanguageDto {
    name!: string;
    displayName!: string;
    icon?: string | undefined;
    enabled?: boolean;
    default?: boolean;
    id?: number;

    constructor(data?: ILanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.icon = data["icon"];
            this.enabled = data["enabled"];
            this.default = data["default"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): LanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["enabled"] = this.enabled;
        data["default"] = this.default;
        data["id"] = this.id;
        return data; 
    }
}

export interface ILanguageDto {
    name: string;
    displayName: string;
    icon?: string | undefined;
    enabled?: boolean;
    default?: boolean;
    id?: number;
}

export class AjaxResponseOfLanguageDto implements IAjaxResponseOfLanguageDto {
    result?: LanguageDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new LanguageDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? LanguageDto.fromJS(data["result"]) : new LanguageDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfLanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfLanguageDto {
    result?: LanguageDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class PagedResultDtoOfLanguageDto implements IPagedResultDtoOfLanguageDto {
    totalCount?: number;
    items?: LanguageDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LanguageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLanguageDto {
    totalCount?: number;
    items?: LanguageDto[] | undefined;
}

export class AjaxResponseOfPagedResultDtoOfLanguageDto implements IAjaxResponseOfPagedResultDtoOfLanguageDto {
    result?: PagedResultDtoOfLanguageDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfPagedResultDtoOfLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new PagedResultDtoOfLanguageDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? PagedResultDtoOfLanguageDto.fromJS(data["result"]) : new PagedResultDtoOfLanguageDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultDtoOfLanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultDtoOfLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfPagedResultDtoOfLanguageDto {
    result?: PagedResultDtoOfLanguageDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class LocalizationResultRequestDto implements ILocalizationResultRequestDto {
    languageSource?: string | undefined;
    languageName?: string | undefined;
    languageKey?: string | undefined;
    notTranslatedOnly?: boolean;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;

    constructor(data?: ILocalizationResultRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageSource = data["languageSource"];
            this.languageName = data["languageName"];
            this.languageKey = data["languageKey"];
            this.notTranslatedOnly = data["notTranslatedOnly"];
            this.sorting = data["sorting"];
            this.skipCount = data["skipCount"];
            this.maxResultCount = data["maxResultCount"];
        }
    }

    static fromJS(data: any): LocalizationResultRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizationResultRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageSource"] = this.languageSource;
        data["languageName"] = this.languageName;
        data["languageKey"] = this.languageKey;
        data["notTranslatedOnly"] = this.notTranslatedOnly;
        data["sorting"] = this.sorting;
        data["skipCount"] = this.skipCount;
        data["maxResultCount"] = this.maxResultCount;
        return data; 
    }
}

export interface ILocalizationResultRequestDto {
    languageSource?: string | undefined;
    languageName?: string | undefined;
    languageKey?: string | undefined;
    notTranslatedOnly?: boolean;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;
}

export class LocalizationDto implements ILocalizationDto {
    source?: string | undefined;
    languageName?: string | undefined;
    key!: string;
    default?: string | undefined;
    value!: string;

    constructor(data?: ILocalizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.source = data["source"];
            this.languageName = data["languageName"];
            this.key = data["key"];
            this.default = data["default"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): LocalizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source;
        data["languageName"] = this.languageName;
        data["key"] = this.key;
        data["default"] = this.default;
        data["value"] = this.value;
        return data; 
    }
}

export interface ILocalizationDto {
    source?: string | undefined;
    languageName?: string | undefined;
    key: string;
    default?: string | undefined;
    value: string;
}

export class PagedResultDtoOfLocalizationDto implements IPagedResultDtoOfLocalizationDto {
    totalCount?: number;
    items?: LocalizationDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLocalizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LocalizationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLocalizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLocalizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLocalizationDto {
    totalCount?: number;
    items?: LocalizationDto[] | undefined;
}

export class AjaxResponseOfPagedResultDtoOfLocalizationDto implements IAjaxResponseOfPagedResultDtoOfLocalizationDto {
    result?: PagedResultDtoOfLocalizationDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfPagedResultDtoOfLocalizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new PagedResultDtoOfLocalizationDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? PagedResultDtoOfLocalizationDto.fromJS(data["result"]) : new PagedResultDtoOfLocalizationDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultDtoOfLocalizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultDtoOfLocalizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfPagedResultDtoOfLocalizationDto {
    result?: PagedResultDtoOfLocalizationDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class AjaxResponseOfLocalizationDto implements IAjaxResponseOfLocalizationDto {
    result?: LocalizationDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfLocalizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new LocalizationDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? LocalizationDto.fromJS(data["result"]) : new LocalizationDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfLocalizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfLocalizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfLocalizationDto {
    result?: LocalizationDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class SourceDto implements ISourceDto {
    name?: string | undefined;

    constructor(data?: ISourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): SourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new SourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ISourceDto {
    name?: string | undefined;
}

export class AjaxResponseOfListOfSourceDto implements IAjaxResponseOfListOfSourceDto {
    result?: SourceDto[] | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfListOfSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(SourceDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfListOfSourceDto {
    result?: SourceDto[] | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class LanguageDto2 implements ILanguageDto2 {
    name?: string | undefined;
    displayName?: string | undefined;

    constructor(data?: ILanguageDto2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): LanguageDto2 {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageDto2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface ILanguageDto2 {
    name?: string | undefined;
    displayName?: string | undefined;
}

export class AjaxResponseOfListOfLanguageDto implements IAjaxResponseOfListOfLanguageDto {
    result?: LanguageDto2[] | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfListOfLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(LanguageDto2.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfLanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfListOfLanguageDto {
    result?: LanguageDto2[] | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class CreateRoleDto implements ICreateRoleDto {
    name!: string;
    displayName!: string;
    normalizedName?: string | undefined;
    description?: string | undefined;
    isStatic?: boolean;
    permissions?: string[] | undefined;

    constructor(data?: ICreateRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.normalizedName = data["normalizedName"];
            this.description = data["description"];
            this.isStatic = data["isStatic"];
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(item);
            }
        }
    }

    static fromJS(data: any): CreateRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["normalizedName"] = this.normalizedName;
        data["description"] = this.description;
        data["isStatic"] = this.isStatic;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data; 
    }
}

export interface ICreateRoleDto {
    name: string;
    displayName: string;
    normalizedName?: string | undefined;
    description?: string | undefined;
    isStatic?: boolean;
    permissions?: string[] | undefined;
}

export class RoleDto implements IRoleDto {
    name!: string;
    displayName!: string;
    normalizedName?: string | undefined;
    description?: string | undefined;
    isStatic?: boolean;
    permissions?: string[] | undefined;
    id?: number;

    constructor(data?: IRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.normalizedName = data["normalizedName"];
            this.description = data["description"];
            this.isStatic = data["isStatic"];
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(item);
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["normalizedName"] = this.normalizedName;
        data["description"] = this.description;
        data["isStatic"] = this.isStatic;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IRoleDto {
    name: string;
    displayName: string;
    normalizedName?: string | undefined;
    description?: string | undefined;
    isStatic?: boolean;
    permissions?: string[] | undefined;
    id?: number;
}

export class AjaxResponseOfRoleDto implements IAjaxResponseOfRoleDto {
    result?: RoleDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new RoleDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? RoleDto.fromJS(data["result"]) : new RoleDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfRoleDto {
    result?: RoleDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class RoleListDto implements IRoleListDto {
    name?: string | undefined;
    displayName?: string | undefined;
    isStatic?: boolean;
    isDefault?: boolean;
    creationTime?: moment.Moment;
    id?: number;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IRoleListDto {
    name?: string | undefined;
    displayName?: string | undefined;
    isStatic?: boolean;
    isDefault?: boolean;
    creationTime?: moment.Moment;
    id?: number;
}

export class ListResultDtoOfRoleListDto implements IListResultDtoOfRoleListDto {
    items?: RoleListDto[] | undefined;

    constructor(data?: IListResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfRoleListDto {
    items?: RoleListDto[] | undefined;
}

export class AjaxResponseOfListResultDtoOfRoleListDto implements IAjaxResponseOfListResultDtoOfRoleListDto {
    result?: ListResultDtoOfRoleListDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfListResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new ListResultDtoOfRoleListDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ListResultDtoOfRoleListDto.fromJS(data["result"]) : new ListResultDtoOfRoleListDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListResultDtoOfRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfListResultDtoOfRoleListDto {
    result?: ListResultDtoOfRoleListDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class UpdateRoleDto implements IUpdateRoleDto {
    name!: string;
    displayName!: string;
    description?: string | undefined;
    permissions?: string[] | undefined;
    id?: number;

    constructor(data?: IUpdateRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(item);
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UpdateRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IUpdateRoleDto {
    name: string;
    displayName: string;
    description?: string | undefined;
    permissions?: string[] | undefined;
    id?: number;
}

export class PermissionDto implements IPermissionDto {
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    id?: number;

    constructor(data?: IPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPermissionDto {
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    id?: number;
}

export class ListResultDtoOfPermissionDto implements IListResultDtoOfPermissionDto {
    items?: PermissionDto[] | undefined;

    constructor(data?: IListResultDtoOfPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PermissionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfPermissionDto {
    items?: PermissionDto[] | undefined;
}

export class AjaxResponseOfListResultDtoOfPermissionDto implements IAjaxResponseOfListResultDtoOfPermissionDto {
    result?: ListResultDtoOfPermissionDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfListResultDtoOfPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new ListResultDtoOfPermissionDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ListResultDtoOfPermissionDto.fromJS(data["result"]) : new ListResultDtoOfPermissionDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListResultDtoOfPermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListResultDtoOfPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfListResultDtoOfPermissionDto {
    result?: ListResultDtoOfPermissionDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class RoleEditDto implements IRoleEditDto {
    name!: string;
    displayName!: string;
    description?: string | undefined;
    isStatic?: boolean;
    id?: number;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isStatic = data["isStatic"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isStatic"] = this.isStatic;
        data["id"] = this.id;
        return data; 
    }
}

export interface IRoleEditDto {
    name: string;
    displayName: string;
    description?: string | undefined;
    isStatic?: boolean;
    id?: number;
}

export class FlatPermissionDto implements IFlatPermissionDto {
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;

    constructor(data?: IFlatPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        return data; 
    }
}

export interface IFlatPermissionDto {
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    role?: RoleEditDto;
    permissions?: FlatPermissionDto[] | undefined;
    grantedPermissionNames?: string[] | undefined;

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.role = new RoleEditDto();
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetRoleForEditOutput {
    role?: RoleEditDto;
    permissions?: FlatPermissionDto[] | undefined;
    grantedPermissionNames?: string[] | undefined;
}

export class AjaxResponseOfGetRoleForEditOutput implements IAjaxResponseOfGetRoleForEditOutput {
    result?: GetRoleForEditOutput;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new GetRoleForEditOutput();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? GetRoleForEditOutput.fromJS(data["result"]) : new GetRoleForEditOutput();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfGetRoleForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfGetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfGetRoleForEditOutput {
    result?: GetRoleForEditOutput;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class PagedResultDtoOfRoleDto implements IPagedResultDtoOfRoleDto {
    totalCount?: number;
    items?: RoleDto[] | undefined;

    constructor(data?: IPagedResultDtoOfRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfRoleDto {
    totalCount?: number;
    items?: RoleDto[] | undefined;
}

export class AjaxResponseOfPagedResultDtoOfRoleDto implements IAjaxResponseOfPagedResultDtoOfRoleDto {
    result?: PagedResultDtoOfRoleDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfPagedResultDtoOfRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new PagedResultDtoOfRoleDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? PagedResultDtoOfRoleDto.fromJS(data["result"]) : new PagedResultDtoOfRoleDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultDtoOfRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultDtoOfRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfPagedResultDtoOfRoleDto {
    result?: PagedResultDtoOfRoleDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version?: string | undefined;
    releaseDate?: moment.Moment;
    features?: { [key: string] : boolean; } | undefined;

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.version = data["version"];
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : <any>undefined;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key];
            }
        }
        return data; 
    }
}

export interface IApplicationInfoDto {
    version?: string | undefined;
    releaseDate?: moment.Moment;
    features?: { [key: string] : boolean; } | undefined;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    name?: string | undefined;
    surname?: string | undefined;
    userName?: string | undefined;
    emailAddress?: string | undefined;
    id?: number;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserLoginInfoDto {
    name?: string | undefined;
    surname?: string | undefined;
    userName?: string | undefined;
    emailAddress?: string | undefined;
    id?: number;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    tenancyName?: string | undefined;
    name?: string | undefined;
    id?: number;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantLoginInfoDto {
    tenancyName?: string | undefined;
    name?: string | undefined;
    id?: number;
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    application?: ApplicationInfoDto;
    user?: UserLoginInfoDto;
    tenant?: TenantLoginInfoDto;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.application = new ApplicationInfoDto();
            this.user = new UserLoginInfoDto();
            this.tenant = new TenantLoginInfoDto();
        }
    }

    init(data?: any) {
        if (data) {
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : new ApplicationInfoDto();
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : new UserLoginInfoDto();
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : new TenantLoginInfoDto();
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCurrentLoginInformationsOutput {
    application?: ApplicationInfoDto;
    user?: UserLoginInfoDto;
    tenant?: TenantLoginInfoDto;
}

export class AjaxResponseOfGetCurrentLoginInformationsOutput implements IAjaxResponseOfGetCurrentLoginInformationsOutput {
    result?: GetCurrentLoginInformationsOutput;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new GetCurrentLoginInformationsOutput();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? GetCurrentLoginInformationsOutput.fromJS(data["result"]) : new GetCurrentLoginInformationsOutput();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfGetCurrentLoginInformationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfGetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfGetCurrentLoginInformationsOutput {
    result?: GetCurrentLoginInformationsOutput;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class CreateTenantDto implements ICreateTenantDto {
    tenancyName!: string;
    name!: string;
    adminEmailAddress!: string;
    connectionString?: string | undefined;
    isActive?: boolean;

    constructor(data?: ICreateTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateTenantDto {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    connectionString?: string | undefined;
    isActive?: boolean;
}

export class FeatureDto implements IFeatureDto {
    name?: string | undefined;
    displayName?: string | undefined;
    value?: string | undefined;
    inputType?: string | undefined;
    validator?: string | undefined;

    constructor(data?: IFeatureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.value = data["value"];
            this.inputType = data["inputType"];
            this.validator = data["validator"];
        }
    }

    static fromJS(data: any): FeatureDto {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["value"] = this.value;
        data["inputType"] = this.inputType;
        data["validator"] = this.validator;
        return data; 
    }
}

export interface IFeatureDto {
    name?: string | undefined;
    displayName?: string | undefined;
    value?: string | undefined;
    inputType?: string | undefined;
    validator?: string | undefined;
}

export class SettingDto implements ISettingDto {
    name?: string | undefined;
    displayName?: string | undefined;
    value?: string | undefined;

    constructor(data?: ISettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): SettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new SettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["value"] = this.value;
        return data; 
    }
}

export interface ISettingDto {
    name?: string | undefined;
    displayName?: string | undefined;
    value?: string | undefined;
}

export class TenantDto implements ITenantDto {
    tenancyName!: string;
    name!: string;
    isActive?: boolean;
    customActions?: string[] | undefined;
    features?: FeatureDto[] | undefined;
    settings?: SettingDto[] | undefined;
    id?: number;

    constructor(data?: ITenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.isActive = data["isActive"];
            if (data["customActions"] && data["customActions"].constructor === Array) {
                this.customActions = [];
                for (let item of data["customActions"])
                    this.customActions.push(item);
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FeatureDto.fromJS(item));
            }
            if (data["settings"] && data["settings"].constructor === Array) {
                this.settings = [];
                for (let item of data["settings"])
                    this.settings.push(SettingDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["isActive"] = this.isActive;
        if (this.customActions && this.customActions.constructor === Array) {
            data["customActions"] = [];
            for (let item of this.customActions)
                data["customActions"].push(item);
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        if (this.settings && this.settings.constructor === Array) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantDto {
    tenancyName: string;
    name: string;
    isActive?: boolean;
    customActions?: string[] | undefined;
    features?: FeatureDto[] | undefined;
    settings?: SettingDto[] | undefined;
    id?: number;
}

export class AjaxResponseOfTenantDto implements IAjaxResponseOfTenantDto {
    result?: TenantDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new TenantDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? TenantDto.fromJS(data["result"]) : new TenantDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfTenantDto {
    result?: TenantDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class PagedResultDtoOfTenantDto implements IPagedResultDtoOfTenantDto {
    totalCount?: number;
    items?: TenantDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTenantDto {
    totalCount?: number;
    items?: TenantDto[] | undefined;
}

export class AjaxResponseOfPagedResultDtoOfTenantDto implements IAjaxResponseOfPagedResultDtoOfTenantDto {
    result?: PagedResultDtoOfTenantDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfPagedResultDtoOfTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new PagedResultDtoOfTenantDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? PagedResultDtoOfTenantDto.fromJS(data["result"]) : new PagedResultDtoOfTenantDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultDtoOfTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultDtoOfTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfPagedResultDtoOfTenantDto {
    result?: PagedResultDtoOfTenantDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class AuthenticateModel implements IAuthenticateModel {
    userNameOrEmailAddress!: string;
    password!: string;
    rememberClient?: boolean;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"];
            this.password = data["password"];
            this.rememberClient = data["rememberClient"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["rememberClient"] = this.rememberClient;
        return data; 
    }
}

export interface IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    rememberClient?: boolean;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken?: string | undefined;
    encryptedAccessToken?: string | undefined;
    expireInSeconds?: number;
    userId?: number;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IAuthenticateResultModel {
    accessToken?: string | undefined;
    encryptedAccessToken?: string | undefined;
    expireInSeconds?: number;
    userId?: number;
}

export class AjaxResponseOfAuthenticateResultModel implements IAjaxResponseOfAuthenticateResultModel {
    result?: AuthenticateResultModel;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new AuthenticateResultModel();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? AuthenticateResultModel.fromJS(data["result"]) : new AuthenticateResultModel();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfAuthenticateResultModel {
    result?: AuthenticateResultModel;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    name?: string | undefined;
    clientId?: string | undefined;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.clientId = data["clientId"];
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        return data; 
    }
}

export interface IExternalLoginProviderInfoModel {
    name?: string | undefined;
    clientId?: string | undefined;
}

export class AjaxResponseOfListOfExternalLoginProviderInfoModel implements IAjaxResponseOfListOfExternalLoginProviderInfoModel {
    result?: ExternalLoginProviderInfoModel[] | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfListOfExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfExternalLoginProviderInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfListOfExternalLoginProviderInfoModel {
    result?: ExternalLoginProviderInfoModel[] | undefined;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    authProvider!: string;
    providerKey!: string;
    providerAccessCode!: string;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        return data; 
    }
}

export interface IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    accessToken?: string | undefined;
    encryptedAccessToken?: string | undefined;
    expireInSeconds?: number;
    waitingForActivation?: boolean;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.waitingForActivation = data["waitingForActivation"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        return data; 
    }
}

export interface IExternalAuthenticateResultModel {
    accessToken?: string | undefined;
    encryptedAccessToken?: string | undefined;
    expireInSeconds?: number;
    waitingForActivation?: boolean;
}

export class AjaxResponseOfExternalAuthenticateResultModel implements IAjaxResponseOfExternalAuthenticateResultModel {
    result?: ExternalAuthenticateResultModel;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new ExternalAuthenticateResultModel();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ExternalAuthenticateResultModel.fromJS(data["result"]) : new ExternalAuthenticateResultModel();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfExternalAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfExternalAuthenticateResultModel {
    result?: ExternalAuthenticateResultModel;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class CreateUserDto implements ICreateUserDto {
    userName!: string;
    title?: string | undefined;
    name!: string;
    surname!: string;
    emailAddress!: string;
    phoneNumber?: string | undefined;
    isActive?: boolean;
    roleNames?: string[] | undefined;
    password!: string;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.title = data["title"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.isActive = data["isActive"];
            if (data["roleNames"] && data["roleNames"].constructor === Array) {
                this.roleNames = [];
                for (let item of data["roleNames"])
                    this.roleNames.push(item);
            }
            this.password = data["password"];
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["title"] = this.title;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isActive"] = this.isActive;
        if (this.roleNames && this.roleNames.constructor === Array) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["password"] = this.password;
        return data; 
    }
}

export interface ICreateUserDto {
    userName: string;
    title?: string | undefined;
    name: string;
    surname: string;
    emailAddress: string;
    phoneNumber?: string | undefined;
    isActive?: boolean;
    roleNames?: string[] | undefined;
    password: string;
}

export class UserDto implements IUserDto {
    userName!: string;
    title?: string | undefined;
    name!: string;
    surname!: string;
    emailAddress!: string;
    phoneNumber?: string | undefined;
    isActive?: boolean;
    fullName?: string | undefined;
    lastLoginTime?: moment.Moment | undefined;
    creationTime?: moment.Moment;
    roleNames?: string[] | undefined;
    tenantId?: number | undefined;
    canDelete?: boolean;
    customActions?: string[] | undefined;
    id?: number;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.title = data["title"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.isActive = data["isActive"];
            this.fullName = data["fullName"];
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            if (data["roleNames"] && data["roleNames"].constructor === Array) {
                this.roleNames = [];
                for (let item of data["roleNames"])
                    this.roleNames.push(item);
            }
            this.tenantId = data["tenantId"];
            this.canDelete = data["canDelete"];
            if (data["customActions"] && data["customActions"].constructor === Array) {
                this.customActions = [];
                for (let item of data["customActions"])
                    this.customActions.push(item);
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["title"] = this.title;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isActive"] = this.isActive;
        data["fullName"] = this.fullName;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (this.roleNames && this.roleNames.constructor === Array) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["tenantId"] = this.tenantId;
        data["canDelete"] = this.canDelete;
        if (this.customActions && this.customActions.constructor === Array) {
            data["customActions"] = [];
            for (let item of this.customActions)
                data["customActions"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserDto {
    userName: string;
    title?: string | undefined;
    name: string;
    surname: string;
    emailAddress: string;
    phoneNumber?: string | undefined;
    isActive?: boolean;
    fullName?: string | undefined;
    lastLoginTime?: moment.Moment | undefined;
    creationTime?: moment.Moment;
    roleNames?: string[] | undefined;
    tenantId?: number | undefined;
    canDelete?: boolean;
    customActions?: string[] | undefined;
    id?: number;
}

export class AjaxResponseOfUserDto implements IAjaxResponseOfUserDto {
    result?: UserDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new UserDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? UserDto.fromJS(data["result"]) : new UserDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfUserDto {
    result?: UserDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class UpdateUserDto implements IUpdateUserDto {
    userName!: string;
    title?: string | undefined;
    name!: string;
    surname!: string;
    emailAddress!: string;
    phoneNumber?: string | undefined;
    isActive?: boolean;
    roleNames?: string[] | undefined;
    password?: string | undefined;
    id?: number;

    constructor(data?: IUpdateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.title = data["title"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.isActive = data["isActive"];
            if (data["roleNames"] && data["roleNames"].constructor === Array) {
                this.roleNames = [];
                for (let item of data["roleNames"])
                    this.roleNames.push(item);
            }
            this.password = data["password"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["title"] = this.title;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isActive"] = this.isActive;
        if (this.roleNames && this.roleNames.constructor === Array) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["password"] = this.password;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUpdateUserDto {
    userName: string;
    title?: string | undefined;
    name: string;
    surname: string;
    emailAddress: string;
    phoneNumber?: string | undefined;
    isActive?: boolean;
    roleNames?: string[] | undefined;
    password?: string | undefined;
    id?: number;
}

export class ListResultDtoOfRoleDto implements IListResultDtoOfRoleDto {
    items?: RoleDto[] | undefined;

    constructor(data?: IListResultDtoOfRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfRoleDto {
    items?: RoleDto[] | undefined;
}

export class AjaxResponseOfListResultDtoOfRoleDto implements IAjaxResponseOfListResultDtoOfRoleDto {
    result?: ListResultDtoOfRoleDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfListResultDtoOfRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new ListResultDtoOfRoleDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ListResultDtoOfRoleDto.fromJS(data["result"]) : new ListResultDtoOfRoleDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListResultDtoOfRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListResultDtoOfRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfListResultDtoOfRoleDto {
    result?: ListResultDtoOfRoleDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
    languageName!: string;

    constructor(data?: IChangeUserLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data; 
    }
}

export interface IChangeUserLanguageDto {
    languageName: string;
}

export class PagedResultDtoOfUserDto implements IPagedResultDtoOfUserDto {
    totalCount?: number;
    items?: UserDto[] | undefined;

    constructor(data?: IPagedResultDtoOfUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfUserDto {
    totalCount?: number;
    items?: UserDto[] | undefined;
}

export class AjaxResponseOfPagedResultDtoOfUserDto implements IAjaxResponseOfPagedResultDtoOfUserDto {
    result?: PagedResultDtoOfUserDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;

    constructor(data?: IAjaxResponseOfPagedResultDtoOfUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.result = new PagedResultDtoOfUserDto();
            this.error = new ErrorInfo();
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? PagedResultDtoOfUserDto.fromJS(data["result"]) : new PagedResultDtoOfUserDto();
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : new ErrorInfo();
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            this.__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultDtoOfUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultDtoOfUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }
}

export interface IAjaxResponseOfPagedResultDtoOfUserDto {
    result?: PagedResultDtoOfUserDto;
    targetUrl?: string | undefined;
    success?: boolean;
    error?: ErrorInfo;
    unAuthorizedRequest?: boolean;
    __abp?: boolean;
}

export class Result implements IResult {

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IResult {
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}